== Chapter 2: The Acme Shopping Cart

=== Acme Corporation

Our journey involves a fictional company called Acme Corporation, which sells products to hunt road runners footnote:[Acme Corporation is based on the Road Runner / Wile E. Coyote cartoons produced by Looney Tunes, and was depicted as a company that sold, in the words of Wikipedia, “outlandish products that fail catastrophically at the worst possible times” (http://en.wikipedia.org/wiki/Acme_Corporation)].  Acme is a bit late to the ecommerce game, but has an excellent customer service record and is known for the large repertoire of product offerings (indeed, Acme is an acronym that stands for “A Company that Makes Everything”).

We used an open source ecommerce application called Spree to build Acme’s website (http://spreecommerce.com/).  Spree isn’t the most full-featured shopping cart available, but has the advantage of being simple with easy-to-read code.  Spree’s website describes the application as a way of bootstrapping a company’s code and expects software developers to fork it for their company.  “Spree tries to focus on solving the 90% portion that most commerce projects face. The remaining 10% will need to be addressed by the end developer familiar with the client’s exact business requirements” (http://spreecommerce.com/documentation/getting_started.html)

Since the focus of this book is on continuous delivery rather than application develpoment, we will not go into a lot of detail about the design of the Acme website.  You can download the code at [git-repo/ch2].

To get Acme up and running, we need to deploy the website to production.  The future chapters describe how we’re going to do this in an automated way that can be repeated multiple times daily.  To get started, though, we’re going to install it manually.

Our production environment is going to be simplistic.  We’re trying to strike a balance between providing enough real-world complexity to make a compelling example without throwing in the kitchen sink (although Acme sells a wide variety of kitchen sinks).  We’re going to run two load-balanced web servers with a single database server.  All machines will use Debian Linux.  We’ll use MySQL as the database engine.  Each web server will host a single Nginx that proxies to Unicorn servers that run the actual application.  This is a fairly common architecture for rails applications.

INSERT PICTURE

in Chapter 3, we’ll walk you through provisioning new hardware using Amazon Web Services.  For now, you can follow along on any Debian-based virtual machine (including Ubuntu).  The code will run on other Unix environments, including Mac OSX, but we’ll leave it up to you to do the necessary translations.  If you’re following along, it’s probably easies to simply install both the web and database components on one machine.  We’ll address the clustering later.

==== Setting Up The Web Servers

Other
Deploy with Nginx, unicorn, monit: http://techbot.me/2010/08/deployment-recipes-deploying-monitoring-and-securing-your-rails-application-to-a-clean-ubuntu-10-04-install-using-nginx-and-unicorn/


=== Environments

* First a word on environments - What is an environment?
* But address the common misconceptions about environments
* Environment consistency:
	* Many valid reasons environments not consistent ($$), but usually they’re not consistent for invalid reasons - different groups managing them
* We’re going to tackle a simplistic production environment, with the hope that we can reuse all of it for every other environment.  Where it may not make sense to replicate everything across all environments, we’ll make note of it (e.g. devs test against a dev web server for quicker feedback, no load balancer, db on same machine).
* Many of the tools we use have their own notion of environments (Puppet, Go).  Many people have had success using those notions of environments.  But be careful, as a tool’s definition of an environment may not always match what you need...

