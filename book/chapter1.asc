== Chapter 1: Continuous Delivery

=== Introduction

The past decade has been good for software developers.  We’ve seen a renaissance in test automation tools and techniques.  Iterative techniques such as continuous integration have shortened the lead time between having different codebases working together.  Automated deployments are now commonplace, even expected in many organizations, and have contributed to greater consistency and reliability in releasing software.

But has Agile been good for business?

The answer isn't as clear.  We have gotten better at building software systems, and that has undeniably helped business.  Iterative approaches to software development allow us to fail faster, and when failure is inevitable, to cut our losses early and gain our learnings sooner.  But Agile has focused on application development, which is only one piece of the puzzle.  In many cases, improving application development has simply shifted the bottleneck from one area of the organization to another, without significantly improving the ability of the company to deliver software.

Lean thinking encourages us to take a step away from local optimizations and instead to focus on the entire value stream, from idea to production.  Oftentimes, this leads to some interesting observations.

=== The Last Mile

INSERT VSM, SHOWING LAST MILE

the chart above is called a value stream map, which is a common improvement tool used in manufacturing.  It represents a simplistic depiction of the times the various activities take.  You'll note that three types of times are recorded:
Value-Creating Time (VCT) -> The amount of time directly spent on transforming the business idea into something that will bring in revenue.
Cycle Time (C/T) -> The amount of time required to complete a step in the process.  Because some amount of effort is spend on communication overhead, C/T > VCT. 
Wait time -> The amount of time between producing an artifact from one stage and consuming it in the next stage.


Value stream maps help show you where your bottlenecks are and help you focus on the end-to-end lead time.  The value stream above shows a common scenario, especially in large organizations -- after a software release is cut, there is a bottleneck in the wait time before the software can be released.  This wait time is often referred to as the "last mile."

The last mile occurs because, all too often, the development group and the operations group are separate, with different management chains and different key performance indicators (KPIs).  Development groups aim to release features and bug fixes quickly, operations aims to improve stability (pagers going off at 3 a.m. tend to be good incentives to focus on stability).  Unfortunately for developers, changes are the most common cause of system instability, and so operations have quite reasonably added a great deal of ceremony around change.

There is a movement called DevOps that is focused on addressing the last mile.  DevOps conversations often center around technical solutions, which is unfortunate, because technical solutions ignore the root cause of the problem, namely, the different motivations between the two groups.  At its core, DevOps is about people.  

Some organizations have addressed the DevOps divide by removing it entirely.  "You build it, you run it" is the mantra Werner Vogels pushed at Amazon.  Instead of an operator waking up to a pager at 3 a.m., the developer wears the pager.  Amazon went so far as to turn their infrastructure into a service with an API, to allow developers to own infrastructure without having to wire cables or understand cooling systems.  In effect, Amazon removed a handoff in the value time, and, in doing so, put the last mile wait time in the control of the development team.

Other organizations have addressed the last mile by embedding operations and developers together.  This can be tricky for many organizations, as the ratio of operations to developers is usually quite low, and because operational teams tend to lend themselves to a higher degree of specialization than development teams.  Operations includes storage, database administration, network, security, infrastructure, application support, and change management.  Nonetheless, many organizations have successfully provided opportunities for operations to be involved in development projects, and reaped the rewards.  Firewall rules and alerts can be developed alongside the application, log file messages can be coded and evolved according to feedback from operations, and users and groups can be added as part of an application story card.

The benefits of addressing the last mile extend well beyond reducing the wait time.  When operations understand the deployment process and are involved in making it, rather than having it tossed over the wall by developers, its much easier for them to take accountability for it.  When developers understand the risks of change and feel some of the impact of poor changes, they tend to improve their tests and make it easier for troubleshooting production issues.  For example, a common practice in siloed development teams after a QA discovers a bug is for a developer to open a debugger to find the faulty line of code.  Improved operational awareness leads to the realization that operators won't have access to a debugger in production.  Requiring that developers allow diagnosing the bug through log files before fixing it makes operators lives that much easier.

=== The Startup Tax

When starting a new business, or spinning up a new environment for an existing business, it's the first mile, rather than the last mile, that can be a deal-breaker.  In the past few years, this startup tax has been driven down significantly by commoditization, making it easier than ever to bootstrap a new software system.

The infrastructure services that Amazon exposed for its own in-house development teams has been exposed to the outside world in the form of Amazon Web Services (AWS).  Companies such as RackSpace manage hosting for reasonable prices.  For those willing to give up a bit of control in return for easier maintenance, Platform-as-a-Service (PAAS) companies like Heroku will handle many system administrative tasks.

The benefits of building an in-house data center are diminishing.  Very capable companies specialize in racking and stacking, and offer commodity pricing to the outside world.  Cloud computing offers a pay-as-you-go utility model that allows you to start small and only pay for more when you need it.  

There is a very interesting consequence of the cloud paradigm shift.  When it took six weeks to procure a new server, taking a week to configure the box with the various infrastructure components (e.g. web and application server software) was perfectly acceptable.  In the Brave New World of cloud computing, that procurement process can take under a minute, making a lenghty configuration step stick out like a sore thumb.

Modern configuration management toolsets precede cloud computing, but have seen a recent insurgence.  _ _ build CfEngine in 1993, which is a robust tool for automating configuration on a large scale, and is used successfully by Facebook today.  Popular new tools include Puppet and Chef.  These tools pick up where cloud provisioning APIs leave off.  Given a new machine (which can be virtual), install the necessary components.

=== Continuous Delivery

Continuous delivery is about putting the release in the hands of the business.  This requires reducing the lead time between a business request and realizing that request in production.  Focusing on the entire value stream, and allowing a continuous feedback cycle from actual customers that includes both development and operations, is the next frontier in IT.  A few pioneering companies have embraced the paradigm shift of continuous delivery, and have reaped the rewards.

The ability to change frequently, and in small batches, provides an enormous strategic advantage.  Agile methodologies have embraced feedback and small changes, bringing important practices to development teams to improve their feedback cycle.  Continuous delivery is about bringing that feedback cycle to the business as a whole.

Typically, a software system is judged according to certain key performance indicators, such as increasing sales or decreasing call center errors.  Predicting changes to software that will meet these KPIs has traditionally been a dark art.  If releases to production occur quarterly (or less frequently), those changes tend to generate a great deal of angst, as various stakeholders compete for their pet changes based on their pet predictions, which in turn are based on intuition.  Moreover, operations groups recognize a large batch of changes coming their way and prepare for the worst.

When change comes frequently, those concerns tend to disappear.  Changes can be tested and compared against a baseline to see if they’ve improved revenue or not.  This is the practice of split testing (or A/B testing), covered in chapter 12.  Split testing often reveals some surprising results.  Many changes that people cling dearly when releases come infrequently prove to have no effect against the KPIs at all.  Many other changes actually affect the KPIs negatively.  Continuous delivery allows you to test changes in small batches, iterate, and make course corrections as needed.

Small changes also decrease risk.  Imagine the difference, from a risk perspective, in deploying 1,000 changed lines of code versus 1 changed line of code.  Horror stories abound about a developer slipping a single line change into production, and it’s true that that single line of code requires the same testing discipline as the 1,000 lines.  However, if a bug is released, consider how long it will take to diagnose, and consider the impact of rollbacks in both situations.

These benefits allow continuous delivery to form a self-perpetuating cycle.  An idea leads to software or configuration changes.  Those change are tested against real users, which in turn leads to further insights.  Managing the software KPIs becomes a continuous activity owned by the business.

INSERT DIAGRAM HERE SHOWING END-TO-END FEEDBACK CYCLE

one of the key insights of continuous delivery is to distinguish releases from deployments.  Releases are visible -- to the business and to the customers.  Marketing departments tend to relish new releases.  A deployment, on the other hand, is an engineering concept.  A deployment is the mechanism through which a release is made, but not all deployments need to represent releases.  

Some companies have experimented with radically low deployment lead times.  Kent Beck wrote about daily deployments in the second edition of Extreme Programming Explained.  A few brave companies have even adopted continuous deployment, which is a technique that deploys every developer commit that passes the automated testing pipeline into production.  Eric Ries at IMVU considers continuous deployment one of the key components of his Lean Startup concept, as it forces rapid customer feedback.

...

This is a hands-on book.  We take an idea from inception to production and back again with working software that you can run yourself if you’re willing to spend the few dollars it takes to have a complete working copy.  We don’t talk about the idea generation itself, which is also part of the value stream, but we do show you front-to-back automation of the delivery process, from provisioning hardware to running A/B tests in production.

This is not a prescriptive book.  We make no pretenses that the technologies we've selected are the best ones for the job you have to do.  We simply selected a reasonable (and reasonably simple) technology stack to present a compelling example.  The goal is not to dive deeply into any individual technology, nor is it to spend a lot of time showing you how to do something in a technology.  Rather, the goal is to get you excited, to show you what's possible, and to give you the tools to get started.

Continuous delivery is a journey, not a destination.  Put your seat belt on, and enjoy the ride.

